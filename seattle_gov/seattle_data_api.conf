# LS 5.5.1
# https://data.seattle.gov/api/views/
# https://github.com/seattleopendata
# as of 2017.07.05 doc count = 961?
# Works on Windows and Linux
# bin\logstash -f C:\Users\cpryor\OneDrive\Developement\Logstash\00_Testing\seattle_api.conf
# template: template_seattle_data.json
# bin/logstash -f ~/OneDrive/Developement/Logstash/00_Testing/seattle_api.conf


input {
  http_poller {
    id => "1_input_http" 
    urls => {
      "custom_httpd_t1" => { url => "https://data.seattle.gov/api/views/"}
      }
     tags => seattle
     codec => json
     metadata_target => http_poller_metadata
     #FIX update interval
     interval => 5
     #_http_request_failure
  }
}

# filter { json { source => "message" target => "doc" } #_jsonparsefailure }
# FIX drop http_poller.metadata if no longer needed
filter {
	if [http_request_failure.error] == "Read timed out" {
    	drop { id => "2_filter_drop_http_req_failure"}
    }
}

# FIX time fields for publicationDate, rowsUpdatedAt, viewLastModified, createdAt, rowsUpdatedAt, indexUpdatedAt
filter {
      date {
        id => "3_filter_date_publication"
        # 01/27/2015 01:02:00 PM
        match => [ "publicationDate" , "UNIX"]
        #target => "@timestamp"
      }
      date {
        id => "3_filter_date_updated"
        # 01/27/2015 01:02:00 PM
        match => [ "rowsUpdatedAt" , "UNIX"]
      }
      date {
        id => "3_filter_date_modified"
        # 01/27/2015 01:02:00 PM
        match => [ "viewLastModified" , "UNIX"]
      }
      date {
        id => "3_filter_date_created"
        # 01/27/2015 01:02:00 PM
        match => [ "createdAt" , "UNIX" ]
      }
      date {
        id => "3_filter_date_rowsupdated"
        # 01/27/2015 01:02:00 PM
        match => [ "rowsUpdatedAt" , "UNIX" ]
      }
      date {
        id => "3_filter_date_indexupdated"
        # 01/27/2015 01:02:00 PM
        match => [ "indexUpdatedAt" , "UNIX" ]
        #target => "@timestamp"
      }
}

filter {
    mutate { id => "4_filter_mutate_add_enviro" add_field => { "[@metadata][enviro]" => "prod" } }
}

filter {
  mutate {
    id => "5_filter_remove_fields"
    remove_field => [ "grants", "metadata", "[owner][rights]" ]
    # "[metadata][attachments]", "[metadata][jsonQuery]", "[metadata][query]"
  }
}

output {
  stdout {
    codec => rubydebug { metadata => true }
  }
  if "Read timed out" not in [http_request_failure.error] {
  elasticsearch {
    id => "1_output_elasticsearch"
    hosts => "localhost"
	  index => "seattle_data"
    user => "elastic"
    password => "changeme"
    document_type => "doc"
    document_id => "%{id}"
    #template_name => "seattle_data"
    #template => "template_seattle_data.json"
    #manage_template => true
    #template_overwrite => true
    }
  }
}