####
####
####
#### 
#### FIX: ?  metrics.Colli. , IPMAC Binding => message

input {
  tcp { 
    codec => cef { delimiter => "\n"}
    port => 514
    type => syslog
    id => "input_tcp_514" 
  }
  udp { port => 514 type => syslog id => "input_udp_514" tags => [ "udp", "input" ] codec => cef { delimiter => "\n"} }
}


filter {
  if [type] == "syslog" {
      grok {
          id => "filter_grok"
          break_on_match => "true"
          match => { "syslog" => [ 
          "(?:<%{POSINT:syslog_pri}>)?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp})"
          ]}
          add_field => [ "received_at", "%{@timestamp}" ]
          add_field => [ "received_from", "%{host}" ]
          add_field => [ "destinationReverse", "%{destinationAddress}" ]
          remove_field => [ "syslog" ]
      }
      date {
          id => "filter_date"
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }

      cidr { network => "172.16.0.0/16" add_tag => ["lan2"] address => [ "%{destinationAddress}", "%{sourceAddress}" ] }
      cidr { network => "192.168.75.0/24" add_tag => ["lan1"] address => [ "%{destinationAddress}", "%{sourceAddress}" ]}

      #add condition for this type only
      translate {
        id => "filter_translate_device"
        dictionary => [ 
                        "USG40", "Firewall",
                        "USG40W", "Firewall",
                        "USG60", "Firewall",
                        "USG60W", "Firewall",
                        "USG110", "Firewall",
                        "USG210", "Firewall",
                        "USG1100", "Firewall",
                        "USG1900", "Firewall",
                        "USG20", "Firewall",
                        "USG20W", "Firewall",
                        "USG20-VPN", "Firewall",
                        "USG20W-VPN", "Firewall",
                        "USG2200-VPN", "Firewall",
                        "NWA5123-AC", "AP",
                        "NWA5123-AC-HD", "AP"
                         ]
        field => "[deviceProduct]"
        destination => "categoryDeviceType"  
        fallback => "no_match"
      }

      #add condition for this type only categoryDeviceType: "Firewall" AND name:"Access Control" | "IPMAC Binding" 
      if [name] == "Access Control" {
        translate {
          id => "filter_translate_outcome"
          dictionary => [ 
                          "Match default rule, DROP", "Failure",
                          "Match default rule, ICMP Type:8,  DROP", "Failure", 
                          "Drop", "Block"
                         ]
          field => "[message]"
          destination => "categoryOutcome"  
          fallback => "Success"
        }
      }

      if [name] == "INTERFACE STATISTICS" {
          kv {
            source => "message"
            field_split => ","
            value_split => "="
            target => "metrics"
            #transform_value => "lowercase"
            #include_keys => [ "src" , "dest"]
            remove_field => [ "message" ]
          }
      }


      if [name] == "IPMAC Binding" {
        grok {
            id => "1_filter_grok_ipmac" 
            break_on_match => "true"
            match => { "message" => [ "%{WORD:status}%{SPACE}%{WORD}%{SPACE}%{WORD:lan}-%{IP:ip}-%{MAC:mac}" ]}
        }

        translate {
          id => "filter_translate_outcome_ipmac"
          dictionary => [ 
                          "Drop packet", "Failure",
                          "Match default rule, ICMP Type:8,  DROP", "Failure", 
                          "Drop", "Block"
                         ]
          field => "[status]"
          destination => "categoryOutcome"  
          #fallback => "Success"
          remove_field => [ "status" ]
        }
      }


      if [name] == "System Monitoring" {
          kv {
            source => "message"
            field_split => ","
            value_split => "="
            target => "metrics"
            #transform_value => "lowercase"
            #include_keys => [ "src" , "dest"]
            remove_field => [ "message" ]
          }
      }

      #name: IPMAC Binding | Access Control | Traffic Log
      #add condition non-local/private 
      if [name] == "IPMAC Binding" or "Access Control" or "Traffic Log"  {
        dns {
          id => "filter_reverse_dns_udp"
          failed_cache_size => "512"
          failed_cache_ttl => "86400"
          hit_cache_size => "512"
          hit_cache_ttl => "36000"
          max_retries => "3"
          timeout => "0.05"
          #periodic_flush => false
          nameserver => ["4.2.2.2", "4.4.4.4", "192.168.75.1"]
          reverse => [ "destinationReverse" ]
          action => "replace"
          #add_tag => [ "dns_lookup" ]
        }

        if [sourceAddress] !~ /^0\./ {        
        # To map the attacker Geo IP if plausible
        #add condition
        geoip {
          source => "sourceAddress"
          target => "source"
          add_tag => ["source_geo"]
         }
         
        }
        if [destinationAddress] !~ /^0\./ {    
        # To map the target Geo IP if plausible
        #add condition
        geoip {
          source => "destinationAddress"
          target => "destination"
          add_tag => ["destination_geo"]
         }      
        }
        if [deviceAddress] !~ /^0\./ {    
        # To map the log producing device Geo IP if plausible
        #add condition
        geoip {
          source => "deviceAddress"
          target => "device"
          add_tag => ["device_geo"]
         }
        }

        if [sourceAddress] !~ /^192\./ {        
        # To map the attacker Geo IP if plausible
        #add condition
        geoip {
          source => "sourceAddress"
          target => "source"
          add_tag => ["source_geo"]
         }
         
        }
        if [destinationAddress] !~ /^192\./ {    
        # To map the target Geo IP if plausible
        #add condition
        geoip {
          source => "destinationAddress"
          target => "destination"
          add_tag => ["destination_geo"]
         }      
        }
        if [deviceAddress] !~ /^192\./ {    
        # To map the log producing device Geo IP if plausible
        #add condition
        geoip {
          source => "deviceAddress"
          target => "device"
          add_tag => ["device_geo"]
         }
        }
      }
  }
}  

output {
  if [type] == "syslog" {
  elasticsearch { 
    id => "output_elasticseasrch_0"
    hosts => ["http://esprod.chadwiki.loc:9200"]
    #manage_template => false
    index => "cef-%{+YYYY.MM.dd}"
    #document_type => "doc"
    template_name => "cef"
    template => "C:\Elasticsearch\logstash\conf\cef_template.json"
    template_overwrite => true
    user => "logstash_writer"
    password => "<UPDATE>"
    }
    #stdout { codec => dots }
  }
  stdout { codec => rubydebug }
}